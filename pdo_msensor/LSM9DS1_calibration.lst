C51 COMPILER V9.60.0.0   LSM9DS1_CALIBRATION                                               10/24/2021 23:25:52 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LSM9DS1_CALIBRATION
OBJECT MODULE PLACED IN .\output\LSM9DS1_calibration.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE library\LSM9DS1_calibration.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\library;
                    -..\LSM9DS1_new sensor MCU program) DEFINE(Custom,library) DEBUG OBJECTEXTEND PRINT(.\LSM9DS1_calibration.lst) TABS(2) OB
                    -JECT(.\output\LSM9DS1_calibration.obj)

line level    source

   1          #include "LSM9DS1_calibration.h"
   2          #include "AT24C512.h"
   3          #include "Ext_function.h"
   4          
   5          // void write_gain_and_offset_matrix(unsigned char row, unsigned char col, float num){    
   6          //  char i; //Loop counter
   7          
   8          //  CHAR_TO_FLOAT char_to_float;
   9          //  char_to_float._float = num;
  10              
  11          //  for(i=0;i<4;i++){
  12          //     write((unsigned short int)(12*row+4*col+i), char_to_float._char[i]);
  13          //     }
  14          // }
  15          
  16          // float read_gain_and_offset_matrix(unsigned char row, unsigned char col){
  17          //  char i; //Loop counter
  18          //  CHAR_TO_FLOAT char_to_float;
  19              
  20          //     for(i=0;i<4;i++){
  21          //    char_to_float._char[i] = read((unsigned short int)(12*row+4*col+i)); //[0]LSB -> [3]MSB
  22          //  }
  23          
  24          //  return char_to_float._float;
  25          // }
  26          
  27          // int power_of_10(char exp){
  28          //     int result = 10;
  29          //     char i = exp;
  30          
  31          //     if(i<0){
  32          //         return 0;
  33          //     }
  34          //     else if(i == 0){
  35          //         return 1;
  36          //     }
  37          
  38          //     for(i=exp;i>1;i--){
  39          //         result *= 10;
  40          //     }
  41          //     return result;
  42          // }
  43          
  44          // float byte_to_float(char *bytes, char index_start, char index_end){
  45          //     char i = 0;
  46          //     char sign_semicolon = -1;
  47          //     char sign_dot = -1;
  48          //     char flag_sign = 1;
  49          //     float result = 0.0;
  50          //     //EW32=120.123;
  51          
  52          //     //Check sign
  53          //     if(*(bytes+index_start) == '-'){
C51 COMPILER V9.60.0.0   LSM9DS1_CALIBRATION                                               10/24/2021 23:25:52 PAGE 2   

  54          //         flag_sign = -1;
  55          //         index_start++;
  56          //     }
  57          //     else if(*(bytes+index_start) == '+'){
  58          //         flag_sign = 1;
  59          //         index_start++;
  60          //     }
  61          
  62          //     //find semicolon
  63          //     for(i=index_start;i<=index_end;i++){
  64          //         if(*(bytes+i) == ';'){
  65          //             sign_semicolon = i;
  66          //             sign_dot = (sign_dot == -1)?sign_semicolon:sign_dot;
  67          //             break;
  68          //         }
  69          //         else if(*(bytes+i) == '.'){
  70          //             sign_dot = i;
  71          //         }
  72          //         else if(*(bytes+i) < '0' || *(bytes+i) > '9'){
  73          //             return -999.0;
  74          //         } 
  75          //     }
  76          
  77          //     //Cannot find EOL sign(semicolon)
  78          //     if(sign_semicolon == -1){
  79          //         return -999.0;
  80          //     }
  81          //     else if(sign_semicolon-sign_dot == 1){
  82          //         return -999.0;
  83          //     }
  84          
  85          //     //integers
  86          //     for(i=index_start;i<sign_dot;i++){
  87          //         result += (power_of_10(sign_dot-i-1)*(*(bytes+i)-'0'));
  88          //     }
  89          
  90          //     //decimal
  91          //     for(i=(sign_dot+1);i<sign_semicolon;i++){
  92          //         result += (1.0/power_of_10(i-sign_dot))*(*(bytes+i)-'0');
  93          //     }
  94          //     result *= flag_sign;
  95          //     return result;
  96          // }
  97          
  98          // float byte_to_float(char *bytes, int SIZE){
  99          //     char sign = 0;
 100          //     char *ptr_header = bytes;
 101          //     char *ptr_dot = bytes; 
 102          //     float result = 0.0;
 103          //     int i; //Loop counter
 104            
 105          //     if(!(SIZE > 0)){
 106          //         return -999.0;
 107          //     }
 108              
 109          //     //Check sign
 110          //     if((*ptr_header>='0' && *ptr_header<='9')){
 111          //         sign = 1;
 112          //     }
 113          //     else if((*ptr_header == '+') || (*ptr_header == '.')){
 114          //         ptr_header = ptr_header+1;
 115          //         sign = 1;
C51 COMPILER V9.60.0.0   LSM9DS1_CALIBRATION                                               10/24/2021 23:25:52 PAGE 3   

 116          //     }
 117          //     else if(*ptr_header == '-'){
 118          //         ptr_header = ptr_header+1;
 119          //         sign = -1;
 120          //     }
 121          //     else{
 122          //         return -999.0;
 123          //     }
 124              
 125          //     ptr_dot = ptr_dot+SIZE; //point to last index+1
 126          
 127          //     //Find dot
 128          //     for(i=0; i<SIZE ;i++){
 129          //         if(*(bytes+i)=='.'){
 130          //             ptr_dot = (bytes+i);
 131          //             break;
 132          //         }
 133          //     }
 134            
 135          //     //generate numeric
 136          //     while(ptr_header != (bytes+SIZE)){
 137          //         if(ptr_header == ptr_dot){
 138          //             ptr_header += 1;
 139          //             continue;
 140          //         }
 141          //         if(*ptr_header > '9' || *ptr_header < '0'){
 142          //             return -999.0;
 143          //         }
 144          //         result += (((*ptr_header)-'0')*pow(10.0, ((float)(ptr_dot-ptr_header)/sizeof(char))-((ptr_dot -
             - ptr_header > 0)?1.0:0.0)));
 145          //         ptr_header += 1;
 146          //     }
 147          //     result *= sign;
 148          //     return result;
 149          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
